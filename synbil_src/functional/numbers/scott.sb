data Bit = 0 Bit | 1 Bit | E

0 x = \o, i, e -> (o x)
1 x = \o, i, e -> (i x)
E = \o, i, e -> e


// UFCS
// a.b = b a
a.b = b a 

// 


// 0.0.1.E = "001" big-endian, so 4

succ (x: Bit^n E) = (x // matching on bit x
    1 // x = 0
    (
        \bits: Bit ^(n-1) E
            -> 0 (Inc bits)
    ) // x = 1
    E // x = E
)
succ x = x 1 (0 . Inc) E // shortened



square n f x = (n // matching on first bit in n
    (// bit is 0
        \half -> square half (f >> f) x
    )
    (// bit is 1
        \half -> f <| square half (f >> f) x
    )
    x // bit is E 
)

add = 

decr (n: Scott) f x = (n
    (// bit is 0
        \rest -> s
    )
)







type Number = \o, i, e -> ({o|i} x) e