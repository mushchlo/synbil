// - can be O(log_2 n)
// needs fusible `pred`
pred : Nat -> Nat
pred (Succ a) = \f, x -> (a f x)

pred 0 = 0
pred n f x = extract (n inc (K x))
pred n f x = (n inc (K x)) id
pred n f x = (n inc (K x)) id
pred n f x = extract (n inc (K x))


// need to prove (extract >> value >> n-1) f x = n
// (\x -> (extract (\y ->
//  (value (n-1 f x))
// ))) f x
// 


pred n f x = extract (value (n-1 f x))
pred n f x = extract (n (inc f) (K x))
pred n f x =
    (n
        (\f, g, h -> ((h . g) f))
        (K x)
    ) \u -> u

pred n f x = extract (n (\f, g, h -> ((h . g) f)) (K x))
pred n f x = extract (n inc const)

value v h = h v
extract k = k id
inc g h f = h <| g f
init h x = h x


pred = 