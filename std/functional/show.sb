trait Show for T = {
    show : T -> String
}

(floor . log10) = int_log10
                = count-leading-zeros n

use magic.{log10, floor}



bit-count 0 = 0
bit-count x = magic.count-leading-zeros x

// a mapping from log2 n (the index in the array)
// to log10 n (the value in the array)
guess = Array 33
    [0]*4 ++ [1]*3 ++ [2]*3 ++ [4]*3
          ++ [5]*3 ++ [6]*4 ++ [7]*3
          ++ 

tenToThe = (Array 10).make (i -> (10^i as int))
digits x =
    d = guess[bit-count x]
    d + (x >= tenToThe[d]) as int 

impl Show for {Defines {< 0} + Integer + DivMod + ConstEq} {
    show 0 = "0"
    show 1 = "1"
    show 2 = "2"
    show 3 = "3"
    show 4 = "4"
    show 5 = "5"
    show 6 = "6"
    show 7 = "7"
    show 8 = "8"
    show 9 = "9"

    show n if n < 0 = "-" ++ show -n

    show n =
        digit-count = digits n
        ord = (floor . log10) n
        // digit 0 is the ones place.
        get-digit d = (n / ord.(10^)).floor % 10

        (0 .. digits n)
            .map(get-digit << show)
}