public use ufcs

public {uncurry, curry, hd, tl, _::_, [], square}


// TODOO: eventually, when we migrate away from ascii, we will have a symbol for this. until then, this.
f `.` g = \x -> (f x.g)

uncurry 'A 'B 'C :
    (A -> B -> C) ->
    ((A, B) -> C)
uncurry f = \(a, b) -> (f a b)

curry :
    ((A, B) -> C) ->
        (A -> B -> C)
curry f = \a, b (f (a, b))
// Remember, no parentheses means the comma is syntax sugar for currying.
//
// Note that due to the nature of interaction nets, currying in this way
// (connecting to an ADT wiith partial application) can, when one argument is
// ready far earlier than another, result in highly eager partial computation.
// This can be good if you want fast code, but bad if you want to know how long
// it'll take to run your code.


// cons = _,_
// deconstructors
// nil declared by unique copattern

hd #[] = []
tl [] = []

// definition of :: operator, cons.
right-associative ('A) :: (List 'a) -> {A | List A}
hd x::_ = x
tl _::xs = xs

self-compose f = x -> f (f x)


// square n f x : Functional squaring
/*
    Behavior: Applies a function f, n times to an input x.
    Notes:    n can be any number type with a concept of 0, 1, /2 and %2.
*/
square 0 f x = x
square 1 f x = f x
square n f x = square x%2 f (square n/2 (f `.` f) x)


